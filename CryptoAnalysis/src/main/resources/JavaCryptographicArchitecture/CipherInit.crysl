SPEC javax.crypto.Cipher

OBJECTS
	java.lang.String transformation;
	int encmode;
	java.security.Key key;
	java.security.cert.Certificate cert;
	java.security.spec.AlgorithmParameterSpec params;
	java.security.AlgorithmParameters param;
    
	int pre_plain_off;
	int pre_ciphertext_off;
	int plain_off;
	int ciphertext_off;
    
	int pre_len;
	int len;
    
	byte[] pre_plaintext;
	byte[] pre_ciphertext;
	java.nio.ByteBuffer pre_plainBuffer;
	java.nio.ByteBuffer pre_cipherBuffer;
    
	byte[] plainText;
	byte[] cipherText;
	byte[] wrappedKeyBytes;
	java.nio.ByteBuffer plainBuffer;
	java.nio.ByteBuffer cipherBuffer;
	
	java.security.SecureRandom ranGen;
	
	java.security.Key wrappedKey;

EVENTS

	i1: init(encmode, cert);
	i2: init(encmode, cert, ranGen);
	i3: init(encmode, key);
	i4: init(encmode, key, params);
	i5: init(encmode, key, param);
	i6: init(encmode, key, params, ranGen);
	i7: init(encmode, key, param, ranGen);
	i8: init(encmode, key, ranGen);
	IWOIV := i1 | i2 | i3 | i8;
	IWIV :=  i4 | i5 | i6 | i7;
	Inits := IWOIV | IWIV;

	u1: pre_ciphertext = update(pre_plaintext);
	u2: pre_ciphertext = update(pre_plaintext, pre_plain_off, _);
	u3: update(pre_plaintext, pre_plain_off, pre_len, pre_ciphertext);
	u4: update(pre_plaintext, pre_plain_off, pre_len, pre_ciphertext, pre_ciphertext_off);
	u5: update(pre_plainBuffer, pre_cipherBuffer);
	Updates := u1 | u2 | u3 | u4 | u5;

	f1: cipherText = doFinal();
	f2: cipherText =  doFinal(plainText);
	f3: doFinal(cipherText, ciphertext_off);
	f4: cipherText = doFinal(plainText, plain_off, len);
	f5: doFinal(plainText, plain_off, len, cipherText);
	f6: doFinal(plainText, plain_off, len, cipherText, ciphertext_off);
	f7: doFinal(plainBuffer, cipherBuffer);
	FINWOU := f2 | f4 | f5 | f6 | f7;
	DOFINALS := FINWOU | f1 | f3;
    
	WKB: wrappedKeyBytes = wrap(wrappedKey);
    
	IV: getIV();
    
ORDER
	Inits, WKB+ | (FINWOU | (Updates+, DOFINALS))+

CONSTRAINTS
	encmode in {1,2,3,4};
	length[pre_plaintext] >= pre_plain_off + len;
	length[pre_ciphertext] <= pre_ciphertext_off;
	length[plainText] <= plain_off + len;
	length[cipherText] <= ciphertext_off;

REQUIRES
	
ENSURES
	generatedCipher[this] after Inits;
	encrypted[pre_ciphertext, pre_plaintext] after Updates; 
	encrypted[cipherText, plainText];
	encrypted[cipherBuffer, plainBuffer];
	wrappedKey[wrappedKeyBytes, wrappedKey];
